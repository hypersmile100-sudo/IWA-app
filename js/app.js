// js/app.js - Definitive Final Version (with All Event Listeners Restored)

document.addEventListener('DOMContentLoaded', () => {
    // This check ensures this script only runs on the main user page.
    if (!document.getElementById('submission-form')) return;

    // --- DOM ELEMENT REFERENCES ---
    const notificationToast = document.getElementById('notification-toast');
    const userEmailElement = document.getElementById('user-email'); const logoutBtn = document.getElementById('logout-btn'); const submissionForm = document.getElementById('submission-form'); const submitBtn = document.getElementById('submit-btn'); const formMessage = document.getElementById('form-message'); const projectList = document.getElementById('project-list'); const captchaLabel = document.getElementById('captcha-label'); const captchaInput = document.getElementById('captcha-input'); const newOrderTitle = document.querySelector('#new-order-view .panel-title'); const linkInputsContainer = document.getElementById('link-inputs-container'); const addLinkBtn = document.getElementById('add-link-btn');
    const viewDetailsModal = document.getElementById('view-details-modal'); const viewDetailsContent = document.getElementById('view-details-content'); const editProjectModal = document.getElementById('edit-project-modal'); const editForm = document.getElementById('edit-form'); const editModalTitle = document.getElementById('edit-modal-title'); const editWorkDetails = document.getElementById('edit-work-details'); const editLinkInputsContainer = document.getElementById('edit-link-inputs-container'); const editAddLinkBtn = document.getElementById('edit-add-link-btn'); const updateBtn = document.getElementById('update-btn'); const editFormMessage = document.getElementById('edit-form-message'); const binToggleBtn = document.getElementById('bin-toggle-btn'); const leaderboardLink = document.getElementById('leaderboard-link');
    const workDescriptionEditor = document.getElementById('work-description');
    const editWorkDescriptionEditor = document.getElementById('edit-work-description');
    
    // --- GLOBAL STATE ---
    let captchaAnswer = 0; let currentUser = null; let userProjects = []; let currentEditProjectId = null; let isBinVisible = false;

    // --- HELPER FUNCTIONS ---
    function showNotification(message, type = 'success') { notificationToast.textContent = message; notificationToast.className = type; notificationToast.classList.add('show'); setTimeout(() => { notificationToast.classList.remove('show'); }, 3000); }
    function openModal(modalId) { document.getElementById(modalId).style.display = 'flex'; }
    function closeModal(modalId) { document.getElementById(modalId).style.display = 'none'; }
    function addLinkInput(container) { const newLinkGroup = document.createElement('div'); newLinkGroup.className = 'link-input-group'; newLinkGroup.innerHTML = `<input type="text" class="link-name-input input-field" placeholder="Name of Link"><input type="url" class="link-url-input input-field" placeholder="https://..."><button type="button" class="remove-link-btn">&times;</button>`; container.appendChild(newLinkGroup); }
    function resetFormToNewOrderState() { submissionForm.reset(); if (workDescriptionEditor) workDescriptionEditor.innerHTML = ''; currentEditProjectId = null; submitBtn.textContent = 'Submit Work Order'; newOrderTitle.textContent = 'Submit a New Work Order'; formMessage.textContent = ''; while (linkInputsContainer.children.length > 1) { linkInputsContainer.removeChild(linkInputsContainer.lastChild); } generateCaptcha(); }
    
    // --- MAIN LOGIC FUNCTIONS ---
    async function loadUserProjects() { if (!currentUser) return; projectList.innerHTML = `<p>${isBinVisible ? 'Loading Bin...' : 'Loading projects...'}</p>`; let query = supabaseClient.from('projects').select(`*, project_links (*)`).eq('user_id', currentUser.id); if (isBinVisible) { query = query.not('deleted_at', 'is', null); } else { query = query.is('deleted_at', null); } const { data, error } = await query.order('last_updated_at', { ascending: false }); if (error) { showNotification(`Error: ${error.message}`, 'error'); projectList.innerHTML = '<p>Could not load projects.</p>'; return; } userProjects = data || []; if (userProjects.length === 0) { projectList.innerHTML = `<p class="placeholder-text">${isBinVisible ? 'The Bin is empty.' : 'You have no submitted projects.'}</p>`; return; } projectList.innerHTML = userProjects.map(project => { const status = project.status || 'UNKNOWN'; const description = project.work_description || 'No Description'; const lastUpdated = new Date(project.last_updated_at || project.created_at).toLocaleString(); let statusHTML = `<p class="project-status status-${status.replace(/\s+/g, '-').toLowerCase()}">${status}</p><p class="last-updated">Updated: ${lastUpdated}</p>`; let detailsHTML = ''; let actionsHTML = ''; if(isBinVisible){ actionsHTML = `<div class="project-actions"><button class="btn btn-secondary btn-restore" data-project-id="${project.id}">Restore</button></div>`; } else { if (status === 'REJECTED') { detailsHTML += `<div class="project-details rejected"><strong>Reason:</strong><div class="details-content">${project.rejection_reason}</div></div>`; actionsHTML += `<button class="btn btn-secondary btn-edit" data-project-id="${project.id}">Edit</button>`; } if (status === 'DELIVERED') { if (project.delivery_message) { detailsHTML += `<div class="project-details delivered"><strong>Message from IWA:</strong><div class="details-content">${project.delivery_message}</div></div>`; } const deliveredLinks = project.project_links.filter(l => l.link_type === 'DELIVERED'); if (deliveredLinks.length > 0) { detailsHTML += `<div class="project-details delivered"><strong>Delivered Links:</strong><ul>${deliveredLinks.map(l => `<li><strong>${l.link_name}:</strong> <a href="${l.link_url}" target="_blank">Download/View</a></li>`).join('')}</ul></div>`; } if (!project.rating) { detailsHTML += `<div class="feedback-section"><p>How was our work?</p><div class="stars" data-project-id="${project.id}">${[1,2,3,4,5].map(star => `<span class="star" data-value="${star}" title="${star} stars">★</span>`).join('')}</div><textarea placeholder="Request a correction..." class="correction-input"></textarea><button class="btn-submit-feedback" data-project-id="${project.id}">Submit Feedback</button></div>`; } else { detailsHTML += `<div class="project-details"><strong>Your Rating:</strong> <span class="final-rating">${'★'.repeat(project.rating)}${'☆'.repeat(5 - project.rating)}</span></div>`; } } if (project.correction_query) { detailsHTML += `<div class="project-details correction-query"><strong>Your Correction Request:</strong><div class="details-content">${project.correction_query}</div></div>`; } actionsHTML = `<div class="project-actions">${actionsHTML}<button class="btn-delete" data-project-id="${project.id}">To Bin</button></div>`; } return `<div class="project-item" data-project-id="${project.id}"><p class="project-title">${description.replace(/<[^>]+>/g, '').substring(0, 50)}...</p>${statusHTML}${detailsHTML}${actionsHTML}</div>`; }).join(''); }
    function displayProjectDetails(projectId) { const project = userProjects.find(p => p.id == projectId); if (!project) return; let linksHTML = '<p>No links attached.</p>'; const submittedLinks = project.project_links.filter(l => l.link_type === 'SUBMITTED'); if (submittedLinks.length > 0) { linksHTML = '<ul>' + submittedLinks.map(link => `<li><strong>${link.link_name}:</strong> <a href="${link.link_url}" target="_blank">${link.link_url}</a></li>`).join('') + '</ul>'; } viewDetailsContent.innerHTML = `<h3>Details for Order #${project.id}</h3><p><strong>Status:</strong> <span class="project-status status-${project.status.replace(/\s+/g, '-').toLowerCase()}">${project.status}</span></p><h4>Work Description</h4><div class="details-box details-content">${project.work_description}</div><h4>Important Details</h4><p class="details-box">${project.work_details || 'None provided'}</p><h4>Your Attachment Links</h4>${linksHTML}`; openModal('view-details-modal'); }
    function populateFormForEdit(projectId) { const project = userProjects.find(p => p.id == projectId); if (!project) return; currentEditProjectId = project.id; editModalTitle.textContent = `Editing Work Order #${project.id}`; if(editWorkDescriptionEditor) editWorkDescriptionEditor.innerHTML = project.work_description || ''; editWorkDetails.value = project.work_details || ''; editLinkInputsContainer.innerHTML = ''; const submittedLinks = project.project_links.filter(l => l.link_type === 'SUBMITTED'); if (submittedLinks.length > 0) { submittedLinks.forEach(link => { const newLinkGroup = document.createElement('div'); newLinkGroup.className = 'link-input-group'; newLinkGroup.innerHTML = `<input type="text" class="link-name-input input-field" value="${link.link_name}"><input type="url" class="link-url-input input-field" value="${link.link_url}"><button type="button" class="remove-link-btn">&times;</button>`; editLinkInputsContainer.appendChild(newLinkGroup); }); } else { addLinkInput(editLinkInputsContainer); } openModal('edit-project-modal'); }
    async function handleFormSubmit(e) { e.preventDefault(); const workDescription = workDescriptionEditor.innerHTML; if (!workDescription.trim() || workDescription === '<p><br></p>') { showNotification("The 'What is the work?' field cannot be empty.", 'error'); return; } let hasInvalidLink = false; linkInputsContainer.querySelectorAll('.link-input-group').forEach(group => { const name = group.querySelector('.link-name-input').value.trim(); const url = group.querySelector('.link-url-input').value.trim(); if (url && !name) { showNotification('Error: A link URL is provided without a name.', 'error'); hasInvalidLink = true; } }); if (hasInvalidLink) return; if (parseInt(captchaInput.value) !== captchaAnswer) { showNotification('Incorrect captcha.', 'error'); generateCaptcha(); return; } if (!confirm("Are you sure you want to submit this work order?")) { return; } submitBtn.disabled = true; submitBtn.textContent = 'Submitting...'; try { const workDetails = document.getElementById('work-details').value; const { data: projectData } = await supabaseClient.from('projects').insert({ user_id: currentUser.id, work_description: workDescription, work_details: workDetails }).select().single(); const linksToInsert = []; linkInputsContainer.querySelectorAll('.link-input-group').forEach(group => { const name = group.querySelector('.link-name-input').value.trim(); const url = group.querySelector('.link-url-input').value.trim(); if (name && url) { linksToInsert.push({ project_id: projectData.id, link_name: name, link_url: url, link_type: 'SUBMITTED' }); } }); if (linksToInsert.length > 0) { await supabaseClient.from('project_links').insert(linksToInsert); } showNotification('Work order submitted successfully!'); resetFormToNewOrderState(); await loadUserProjects(); } catch (error) { showNotification(`Error: ${error.message}`, 'error'); } finally { submitBtn.disabled = false; submitBtn.textContent = 'Submit Work Order'; } }
    async function handleUpdateSubmit(e) { e.preventDefault(); if (!currentEditProjectId) return; updateBtn.disabled = true; updateBtn.textContent = 'Updating...'; const workDescription = editWorkDescriptionEditor.innerHTML; const workDetails = editWorkDetails.value; try { await supabaseClient.from('project_links').delete().eq('project_id', currentEditProjectId).eq('link_type', 'SUBMITTED'); const linksToInsert = []; editLinkInputsContainer.querySelectorAll('.link-input-group').forEach(group => { const name = group.querySelector('.link-name-input').value.trim(); const url = group.querySelector('.link-url-input').value.trim(); if (name && url) { linksToInsert.push({ project_id: currentEditProjectId, link_name: name, link_url: url, link_type: 'SUBMITTED' }); } }); if (linksToInsert.length > 0) { await supabaseClient.from('project_links').insert(linksToInsert); } await supabaseClient.from('projects').update({ work_description: workDescription, work_details: workDetails, status: 'SUBMITTED', rejection_reason: null }).eq('id', currentEditProjectId); showNotification('Project updated successfully!'); await loadUserProjects(); setTimeout(() => { closeModal('edit-project-modal'); }, 1000); } catch (error) { showNotification(`Error: ${error.message}`, 'error'); } finally { updateBtn.disabled = false; updateBtn.textContent = 'Update Work Order'; } }
    
    // --- EVENT LISTENERS & INITIALIZATION ---
    async function initializeApp() {
        const { data: { session } } = await supabaseClient.auth.getSession(); if (session) { currentUser = session.user; userEmailElement.textContent = currentUser.email; await loadUserProjects(); } else { window.location.href = 'login.html'; }
        
        document.querySelectorAll('.modal-close-btn').forEach(btn => btn.addEventListener('click', () => closeModal(btn.dataset.modalId)));
        submissionForm.addEventListener('submit', handleFormSubmit);
        editForm.addEventListener('submit', handleUpdateSubmit);
        logoutBtn.addEventListener('click', async () => { await supabaseClient.auth.signOut(); window.location.href = 'login.html'; });
        binToggleBtn.addEventListener('click', (e) => { e.preventDefault(); isBinVisible = !isBinVisible; document.querySelector('.left-panel .panel-title').textContent = isBinVisible ? "Bin" : "Your Work Orders"; binToggleBtn.classList.toggle('active', isBinVisible); loadUserProjects(); });
        
        // THIS IS THE CRITICAL EVENT LISTENER THAT WAS MISSING
        projectList.addEventListener('click', async (e) => {
            const target = e.target; const projectItem = target.closest('.project-item');
            if (target.classList.contains('btn-edit')) { populateFormForEdit(target.dataset.projectId); }
            else if (target.classList.contains('btn-delete')) { const projectId = target.dataset.projectId; const userInput = prompt(`To confirm, please type 'delete' below.`); if (userInput === 'delete') { await supabaseClient.from('projects').update({ deleted_at: new Date() }).eq('id', projectId); showNotification(`Project #${projectId} moved to Bin.`); loadUserProjects(); } else if (userInput !== null) { showNotification('Deletion cancelled.', 'error'); } }
            else if (target.classList.contains('btn-restore')) { const projectId = target.dataset.projectId; if (confirm(`Restore Project #${projectId} from the Bin?`)) { await supabaseClient.from('projects').update({ deleted_at: null }).eq('id', projectId); showNotification('Project restored.'); loadUserProjects(); } }
            else if (target.classList.contains('btn-submit-feedback')) { const projectId = target.dataset.projectId; const item = document.getElementById(`user-project-${projectId}`); const correctionText = item.querySelector('.correction-input').value.trim(); const selectedRating = item.querySelector('.star.selected')?.dataset.value || null; if (!selectedRating && !correctionText) { showNotification('Please provide a rating or a correction request.', 'error'); return; } target.textContent = 'Submitting...'; target.disabled = true; const project = userProjects.find(p => p.id == projectId); if (!project) return; const updateData = { rating: selectedRating, correction_query: correctionText || null, status: correctionText ? 'IN PROGRESS' : project.status }; await supabaseClient.from('projects').update(updateData).eq('id', projectId); showNotification('Thank you for your feedback!'); loadUserProjects(); }
            else if (target.classList.contains('star')) { const stars = target.parentElement.children; const selectedValue = target.dataset.value; for (const star of stars) { star.classList.remove('selected'); } for (const star of stars) { if (star.dataset.value <= selectedValue) { star.classList.add('selected'); } } }
            else if (projectItem) { displayProjectDetails(projectItem.dataset.projectId); }
        });

        projectList.addEventListener('mouseover', e => { if (e.target.classList.contains('star')) { const stars = e.target.parentElement.children; const hoverValue = e.target.dataset.value; for (const star of stars) { star.classList.toggle('hover', star.dataset.value <= hoverValue); } } });
        projectList.addEventListener('mouseout', e => { if(e.target.classList.contains('star')) { const stars = e.target.parentElement.children; for (const star of stars) { star.classList.remove('hover'); } } });
        
        addLinkBtn.addEventListener('click', () => addLinkInput(linkInputsContainer));
        editAddLinkBtn.addEventListener('click', () => addLinkInput(editLinkInputsContainer));
        
        document.body.addEventListener('click', e => {
            if (e.target.closest('.custom-editor-toolbar') && e.target.tagName === 'BUTTON') { e.preventDefault(); document.execCommand(e.target.dataset.command, false, null); }
            if (e.target.classList.contains('remove-link-btn')) { e.target.parentElement.remove(); }
        });
        
        if (leaderboardLink) { leaderboardLink.href = 'leaderboard.html'; leaderboardLink.target = '_blank'; }
        
        function generateCaptcha() { const num1 = Math.floor(Math.random()*10)+1; const num2 = Math.floor(Math.random()*10)+1; captchaAnswer = num1 + num2; captchaLabel.textContent = `What is ${num1} + ${num2}?`; }
        generateCaptcha();
    }
    initializeApp();
});